package com.edios.project.controller;

import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edios.cdf.controller.AbstractController;
import com.edios.cdf.validator.BaseResponse;
import com.edios.project.bean.PurchaseOrdersBean;
import com.edios.project.entity.to.DrawingItemsTO;
import com.edios.project.entity.to.SupplierPOEntityTO;
import com.edios.project.manager.SupplierPOManager;

@RestController
public class SupplierPOController extends AbstractController {
@Autowired
MessageSource messageSource;

@Autowired
SupplierPOManager supplierManager;
@GetMapping("/supplier-autoLookUp/{customerName}")
public ResponseEntity<List<SupplierPOEntityTO>> supplierAutoLookUp(@PathVariable("customerName") String customerName) {
	List<SupplierPOEntityTO> supplierAutoCompleteTO = supplierManager.fetchSuppliers(customerName);
	if (supplierAutoCompleteTO.size() == 0) {
		return new ResponseEntity<List<SupplierPOEntityTO>>(supplierAutoCompleteTO, HttpStatus.OK);
	} else {
		return new ResponseEntity<List<SupplierPOEntityTO>>(supplierAutoCompleteTO, HttpStatus.OK);
	}
}
@PostMapping("/add-supplier-po")
public BaseResponse  addSupplierPO(@RequestBody PurchaseOrdersBean purchaseOrdersBean, HttpServletRequest request) {
	BaseResponse baseResponse = null;
	try {
		purchaseOrdersBean.setUserIPAddress(request.getRemoteAddr());			
		String resultString =supplierManager.addSupplierPOs(purchaseOrdersBean);
		/*if (resultString.equalsIgnoreCase("ADDED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", "");
		}*/
		if (resultString.contains("ADDED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", messageSource.getMessage("autoGeneratedPONumber", new Object[] {resultString.substring(resultString.indexOf(" ")) }, "", Locale.US));
		}
		else if (resultString.equalsIgnoreCase("PO_EXISTS")) {
			baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED",
					messageSource.getMessage("duplicateFieldMessage", new Object[] { "PO No." }, "", Locale.US));
		}else {
			baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
		} 
		return baseResponse;
	} catch (Exception e) {
		e.printStackTrace();
		return baseResponse;
	}
}

@PutMapping("/update-Supplier-po")
public BaseResponse updateSupplierPO(@RequestBody PurchaseOrdersBean purchaseOrdersBean, HttpServletRequest request) {
	BaseResponse baseResponse = null;
	try {
		
		purchaseOrdersBean.setUserIPAddress(request.getRemoteAddr());
		String resultString = supplierManager.updateSupplierPO(purchaseOrdersBean);
		if (resultString.equalsIgnoreCase("UPDATED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "UPDATED", "");
		} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "BAD_REQUEST",
			messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
		} else if (resultString.equalsIgnoreCase("PO_EXISTS")) {
			baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED",
					messageSource.getMessage("duplicateFieldMessage", new Object[] { "PO No." }, "", Locale.US));
		}else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "BAD_REQUEST",
				messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
		}
		return baseResponse;
	} catch (Exception e) {
		e.printStackTrace();
		return baseResponse;
	}
}
@GetMapping("/supplier-drawing-Items/{drawingId}/{projectID}")
public ResponseEntity<List<DrawingItemsTO>> supplierDrawingItems(@PathVariable("drawingId") Long drawingID,@PathVariable("projectID") Long projectID ) {	
	List<DrawingItemsTO> supplierDrawingItems = supplierManager.fetchSupplierDrawingItems(drawingID,projectID);
	if (supplierDrawingItems.size() == 0) {
		return new ResponseEntity<List<DrawingItemsTO>>(supplierDrawingItems, HttpStatus.OK);
	} else {
		return new ResponseEntity<List<DrawingItemsTO>>(supplierDrawingItems, HttpStatus.OK);
	}
}


/*@PostMapping("/add-supplier-po-items")
public BaseResponse  addSupplierStatus(@RequestBody PurchaseOrderItemBean[] purchaseOrderItemsBean, HttpServletRequest request) {
	BaseResponse baseResponse = null;
	try {
		System.out.println(purchaseOrderItemsBean.toString());
		for(PurchaseOrderItemBean ob: purchaseOrderItemsBean) {
			
			System.out.println(ob.getItemID());
			System.out.println(ob.getItemQty());
			System.out.println(ob.getItemUnitRate());
			System.out.println(ob.getPoID());
		}
		
			
		String resultString =supplierManager.addSupplierPOs(purchaseOrdersBean);
		if (resultString.equalsIgnoreCase("ADDED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", "");
		} else {
			baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
		} 
		return baseResponse;
	} catch (Exception e) {
		e.printStackTrace();
		return baseResponse;
	}
}*/

/*@GetMapping("/supplier-drawing-selected-Items/{drawingItemID}/{poID}/{projectID}")
public ResponseEntity<List<DrawingItemsTO>> supplierPOItems(@PathVariable("drawingItemID") Long drawingID ,@PathVariable("poID") Long poID, @PathVariable("projectID") Long projectID) {
//	List<String> DrawingItemIDs =supplierManager.fetchDrawingItemsID(drawingID);
	List<String> DrawingItemIDs =supplierManager.fetchDrawingItemsID(projectID);
	List<DrawingItemsTO> supplierDrawingItems = supplierManager.fetchsupplierPOItems(DrawingItemIDs,poID,projectID);
	if (supplierDrawingItems.size() == 0) {
		return new ResponseEntity<List<DrawingItemsTO>>(supplierDrawingItems, HttpStatus.OK);
	} else {
		return new ResponseEntity<List<DrawingItemsTO>>(supplierDrawingItems, HttpStatus.OK);
	}
}*/
@GetMapping("/supplier-drawing-selected-Items/{poID}/{projectID}")
public ResponseEntity<List<DrawingItemsTO>> supplierPOItems(@PathVariable("poID") Long poID, @PathVariable("projectID") Long projectID) {
//	List<String> DrawingItemIDs =supplierManager.fetchDrawingItemsID(drawingID);
	List<String> DrawingItemIDs =supplierManager.fetchDrawingItemsID(projectID);
	List<DrawingItemsTO> supplierDrawingItems = supplierManager.fetchsupplierPOItems(DrawingItemIDs,poID,projectID);
	if (supplierDrawingItems.size() == 0) {
		return new ResponseEntity<List<DrawingItemsTO>>(supplierDrawingItems, HttpStatus.OK);
	} else {
		return new ResponseEntity<List<DrawingItemsTO>>(supplierDrawingItems, HttpStatus.OK);
	}
}
}
